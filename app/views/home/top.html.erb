<h1>Home#top</h1>
<p>Find me in app/views/home/top.html.erb</p>
<p>デプロイできたぞ！</p>


<h2>【Rails】トップページを自動生成する方法</h2>

<code class="language-markup">
<pre>
$ rails generate controller home top
</pre>
</code>
次回以降、ページを追加する場合は上記コマンドが使用できない。
新規でページを作成し、ルーティングとアクションを追加する。

<h2>【Rails】トップページを編集する方法</h2>
<p>ビューファイル</p>

<code class="language-markup">
<pre>
app/views/home/top.html.erb
</pre>
</code>

<p>CSSファイル</p>
<code class="language-markup">
<pre>
app/assets/stylesheets/home.scss 
</pre>
</code>


<p>コントローラファイル</p>
<code class="language-markup">
<pre>
app/controllers/home_controller.rb
</pre> 
</code>

<p>コントローラの記述を変更してページを設定する。</p>
<code class="language-markup">
<pre>
class HomeController < ApplicationController
  def top
    @posts=Post.all
  end
  def rails
    @posts=Post.all
  end
end
ここではtopページとrailsページが設定されている。
そしてデータベースのPostの中身を各ページで読みさせるように設定している。
</pre>
</code>

<p>ルーティングファイル</p>
<code class="language-markup">
<pre>
config/routes.rb 
</pre>
</code>

<p>ルーティングファイルの記述を変更してページを設定する。</p>
<code class="language-markup">
<pre>
Rails.application.routes.draw do
    root 'home#top'
    get "rails" => "home#rails"
end
ここではアクセスした時のホーム画面とrailsページを設定している。
</pre>
</code>

<h2>【Rails】ローカルでテストする方法</h2>

<p>ターミナルを立ち上げ、アプリケーションサーバを起動する</p>
<code class="language-markup">
<pre>
$ rails s
</pre>   
</code>

<p>ブラウザでlocalhost:3000というドメインにアクセス</p>
<code class="language-markup">
<pre>
http://localhost:3000/
</pre>
</code>


<h2>【Rails】gitを使用してherokuへデプロイをする方法</h2>

<p>ターミナルを立ち上げ、gitでコミットする</p>
<code class="language-markup">
<pre>
$ git add .
$ git commit -m "update heroku"  
</pre>
</code>
<p>gitへプッシュする</p>
<code class="language-markup">
<pre>
$ git push origin master 
</pre>
</code>

<p>herokuへプッシュする</p>
<code class="language-markup">
<pre>
$ git push heroku master 
$ heroku run rake db:migrate
</pre>
</code>


<h2>【Rails】データベースを作成する方法</h2>

<p>ターミナルを立ち上げて、データベースを作成する</p>

<code class="language-markup">
<pre>
$ rails g model Post content:text
$ rails db:migrate
</pre>
</code>

<h2>【Rails】データベースの内容を確認する方法</h2>

<p>コマンドでデータベースのRailsコンソールを立ち上げる</p>
<code class="language-markup">
<pre>
$ rails dbconsole</pre>
</code>
<p>テーブルの一覧を表示</p>
<code class="language-markup">
<pre>
sqlite> .tables
</pre>
</code>
<p>テーブル「posts」の構造（カラムなど）を表示</p>
<code class="language-markup">
<pre>
sqlite> .schema posts
</pre>
</code>
<p>テーブル「posts」の中身を確認</p>
<code class="language-markup">
<pre>
sqlite> select * from posts;
</pre>
</code>

<p>コンソールを終了</p>
<code class="language-markup">
<pre>
sqlite> .quit
</pre>
</code>


<h2>【Rails】データベースの内容を追加する方法</h2>

<p>rails consoleを立ち上げてテーブル「posts」にデータを追加する/p>
<code class="language-markup">
<pre>
$ rails console
</pre>
コンソールが立ち上がったら、データを追加する。
</code>
<code class="language-markup">
<pre>
irb(main):> post1 = Post.new(content: "I work today")
irb(main):> post1.save
</pre>
</code>

登録済みのデータ(ID＝1）を変更する。
</code>
<code class="language-markup">
<pre>
irb(main):> post = Post.find(1)
irb(main):> post.content = "I stay home today"
irb(main):> post.save
</pre>
</code>

<p>コンソールを終了</p>
<code class="language-markup">
<pre>
irb(main):> exit
</pre>
</code>


<h2>【Rails】データベースを使ってWebに表示させる方法3</h2>

<p>home_controller.rbを編集する。</p>
<p>postsの配列にPostデータベースの内容を全てロードする。</p>
<code class="language-markup">
<pre>
class HomeController < ApplicationController
  def top
    @posts=Post.all
  end
end
</pre>
</code>

<p>app/views/home/top.html.erbを編集する。</p>
<p>each doを使ってデータベースのcontentを全て表示させる。</p>
<p>HTML常にRailsを使用する場合は&lt;%----%&gt;が必要</p>
<code class="language-markup">
<pre>
&lt;% @posts.each do |post| %&gt;
    &lt;div class="posts-index-item"&gt;
    &lt;%= post.content %&gt;
    &lt;/div&gt;
&lt;% end %&gt;
</pre>
</code>

<p>RailsアプリはそのままHerokuにデプロイしてもデータベースが動かない。</p>
<p>Railsの標準データベースは SQLite</p>
<p>Herokuのデータベースは PostgreSQL</p>
<p>本番環境のデータベースをSQLiteをPostgreSQLに変える。</p>
<p>本番環境でPostgleSQLを使用するよう設定する。</p>
<p>database.ymlを設定する。</p>

<code class="language-markup">
<pre>
  &lt;&lt;: *default
  adapter: postgresql
  encoding: unicode
  pool: 5
</pre>
</code>
<p>PostgreSQLのバージョンを確認する</p>
<code class="language-markup">
<pre>
$ heroku pg:info
</pre>
</code>
<p>PostgreSQL インストール</p>
<p>herokuのデータベースのバージョンを確認する。</p>
<code class="language-markup">
<pre>
$ heroku pg:info   
</pre>
</code>
<p>HPから同じバージョンをダウンロードする。</p>
<p>.bash_profileにPATHを通す</p>
<code class="language-markup">
<pre>
$ vi ~/.bash_profile
</pre>
</code>

<p>pathを追加して保存する。</p>
<code class="language-markup">
<pre>
export PATH=$PATH:/Library/PostgreSQL/12/bin
</pre>
</code>

<p>PATHを反映させる。</p>
<code class="language-markup">
<pre>
$ source .bash_profile
$ echo $PATH
</pre>
</code>


<p>psqlが実行できるか確認する。</p>
<code class="language-markup">
<pre>
$ psql -V
</pre>
</code>


<p>heroku上のPostgresに接続します。</p>
<p>リポジトリのあるフォルダに移動する。</p>
<p>herokuとgitが紐づいていることを確認する。</p>
<code class="language-markup">
<pre>
$ git remote -v
</pre>
</code>

<p>herokuのデータベースに接続する。</p>
<code class="language-markup">
<pre>
$ heroku pg:psql
</pre>
</code>

<code class="language-markup">
<pre>
app::DATABASE=> \d
app::DATABASE=> \d posts
app::DATABASE=> select * from posts;
新しいレコードを新規生成
app::DATABASE=> INSERT INTO posts(id,content,created_at,updated_at) VALUES(1, 'first data','2020-05-29 14:02:13.008749','2020-05-29 14:02:13.008749');
app::DATABASE=> select * from posts;
既存のレコードを更新する。
app::DATABASE=> update posts set content='holiday' where id=1;
app::DATABASE=> select * from posts;
新しいレコードを新規生成(タイムスタンプ自動生成)
INSERT INTO posts(id,content,created_at,updated_at) VALUES(3, 'go shopping',current_timestamp,current_timestamp);
</pre>
</code>


<br>

<table>
    <thead>
        <tr>
            <th colspan="2">The posts tables</th>
        </tr>
    </thead>
    <tbody>
                <tr class="posts-data">
                    <td>- id -</td>
                    <td>- content -</td>
                    <td>- create -</td>
                    <td>- update -</td>
                </tr>
            <% @posts.each do |post| %>
                <div class="posts-index-item">
                <tr>
                    <td><%= post.id %></td>
                    <td><%= post.content %></td>
                    <td><%= post.created_at %></td>
                    <td><%= post.updated_at %></td>
                </tr>
                </div>
            <% end %>        
        
    </tbody>
</table>

